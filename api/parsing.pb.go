// Code generated by protoc-gen-go. DO NOT EDIT.
// source: parsing.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StatisticsType int32

const (
	StatisticsType_TOTAL_CLASSES    StatisticsType = 0
	StatisticsType_TOTAL_EXCEPTIONS StatisticsType = 1
	StatisticsType_CLASS_EXCEPTIONS StatisticsType = 2
)

var StatisticsType_name = map[int32]string{
	0: "TOTAL_CLASSES",
	1: "TOTAL_EXCEPTIONS",
	2: "CLASS_EXCEPTIONS",
}
var StatisticsType_value = map[string]int32{
	"TOTAL_CLASSES":    0,
	"TOTAL_EXCEPTIONS": 1,
	"CLASS_EXCEPTIONS": 2,
}

func (x StatisticsType) String() string {
	return proto.EnumName(StatisticsType_name, int32(x))
}
func (StatisticsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ParseExceptionsRequest struct {
	Type StatisticsType `protobuf:"varint,1,opt,name=type,enum=api.StatisticsType" json:"type,omitempty"`
}

func (m *ParseExceptionsRequest) Reset()                    { *m = ParseExceptionsRequest{} }
func (m *ParseExceptionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseExceptionsRequest) ProtoMessage()               {}
func (*ParseExceptionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ParseExceptionsRequest) GetType() StatisticsType {
	if m != nil {
		return m.Type
	}
	return StatisticsType_TOTAL_CLASSES
}

type ParseExceptionsResponse struct {
}

func (m *ParseExceptionsResponse) Reset()                    { *m = ParseExceptionsResponse{} }
func (m *ParseExceptionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ParseExceptionsResponse) ProtoMessage()               {}
func (*ParseExceptionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*ParseExceptionsRequest)(nil), "api.ParseExceptionsRequest")
	proto.RegisterType((*ParseExceptionsResponse)(nil), "api.ParseExceptionsResponse")
	proto.RegisterEnum("api.StatisticsType", StatisticsType_name, StatisticsType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Parsing service

type ParsingClient interface {
	ParseExceptions(ctx context.Context, in *ParseExceptionsRequest, opts ...grpc.CallOption) (*ParseExceptionsResponse, error)
}

type parsingClient struct {
	cc *grpc.ClientConn
}

func NewParsingClient(cc *grpc.ClientConn) ParsingClient {
	return &parsingClient{cc}
}

func (c *parsingClient) ParseExceptions(ctx context.Context, in *ParseExceptionsRequest, opts ...grpc.CallOption) (*ParseExceptionsResponse, error) {
	out := new(ParseExceptionsResponse)
	err := grpc.Invoke(ctx, "/api.Parsing/ParseExceptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Parsing service

type ParsingServer interface {
	ParseExceptions(context.Context, *ParseExceptionsRequest) (*ParseExceptionsResponse, error)
}

func RegisterParsingServer(s *grpc.Server, srv ParsingServer) {
	s.RegisterService(&_Parsing_serviceDesc, srv)
}

func _Parsing_ParseExceptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseExceptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParsingServer).ParseExceptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Parsing/ParseExceptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParsingServer).ParseExceptions(ctx, req.(*ParseExceptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Parsing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Parsing",
	HandlerType: (*ParsingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseExceptions",
			Handler:    _Parsing_ParseExceptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parsing.proto",
}

func init() { proto.RegisterFile("parsing.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x48, 0x2c, 0x2a,
	0xce, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x72,
	0xe4, 0x12, 0x0b, 0x48, 0x2c, 0x2a, 0x4e, 0x75, 0xad, 0x48, 0x4e, 0x2d, 0x28, 0xc9, 0xcc, 0xcf,
	0x2b, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x52, 0xe7, 0x62, 0x29, 0xa9, 0x2c, 0x48,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0x12, 0xd6, 0x4b, 0x2c, 0xc8, 0xd4, 0x0b, 0x2e, 0x49,
	0x2c, 0xc9, 0x2c, 0x2e, 0xc9, 0x4c, 0x2e, 0x0e, 0xa9, 0x2c, 0x48, 0x0d, 0x02, 0x2b, 0x50, 0x92,
	0xe4, 0x12, 0xc7, 0x30, 0xa2, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0xcb, 0x9f, 0x8b, 0x0f, 0x55,
	0x8b, 0x90, 0x20, 0x17, 0x6f, 0x88, 0x7f, 0x88, 0xa3, 0x4f, 0xbc, 0xb3, 0x8f, 0x63, 0x70, 0xb0,
	0x6b, 0xb0, 0x00, 0x83, 0x90, 0x08, 0x97, 0x00, 0x44, 0xc8, 0x35, 0xc2, 0xd9, 0x35, 0x20, 0xc4,
	0xd3, 0xdf, 0x2f, 0x58, 0x80, 0x11, 0x24, 0x0a, 0x56, 0x82, 0x2c, 0xca, 0x64, 0x14, 0xce, 0xc5,
	0x1e, 0x00, 0xf1, 0x84, 0x90, 0x0f, 0x17, 0x3f, 0x9a, 0xb5, 0x42, 0xd2, 0x60, 0x47, 0x62, 0xf7,
	0x8f, 0x94, 0x0c, 0x76, 0x49, 0x88, 0x4b, 0x93, 0xd8, 0xc0, 0x61, 0x62, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x29, 0x52, 0x36, 0x80, 0x24, 0x01, 0x00, 0x00,
}
